### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  user: User!
}

scalar DateTime

type Mutation {
  addTag(id: Int!, tags: [String!]!): ServerPayload!
  createServer(content: String, cover: String, ip: String!, tags: [String!]!, title: String!): ServerPayload!
  deleteServer(id: Int!): ServerPayload!
  oAuthLogin(code: String!): AuthPayload!
  publishServer(id: Int!): ServerPayload!
  removeTag(id: Int!, tag: String!): ServerPayload!
  resetVotes(id: Int!): ServerPayload
  testResponse: String!
  updateBan(banned: Boolean!, id: Int!): UserPayload!
  updateContent(content: String!, id: Int!): ServerPayload!
  updateCover(cover: String!, id: Int!): ServerPayload!
  updateIp(id: Int!, ip: String!): ServerPayload!
  updateRemoteInfo(id: Int!, ip: String!): ServerPayload!
  updateRole(id: Int!, role: String!): UserPayload!
  updateTitle(id: Int!, title: String!): ServerPayload!
  vote(id: Int!): VoteCast
}

type Query {
  feed(date: String! = "2020-12-06T18:44:19.935Z", page: Int! = 0): [Server!]!
  me: User
  searchServers(date: String! = "2020-12-06T18:44:19.935Z", page: Int! = 0, searchString: String): [Server!]!
  server(date: String! = "2020-12-06T18:44:19.935Z", id: Int): Server
  users: [User!]!
}

type Server {
  author: User!
  canVote: Boolean!
  content: String
  cover: String
  id: Int!
  published: Boolean!
  slots: Int!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  title: String!
  version: Version!
  voteCount: Int!
  votes(after: VoteWhereUniqueInput, before: VoteWhereUniqueInput, first: Int, last: Int): [Vote!]!
}

type ServerPayload {
  author: Int!
  content: String!
  cover: String!
  id: Int!
  published: Boolean!
  slots: Int!
  tags: Tag!
  title: String!
  version: Version!
}

input ServerWhereUniqueInput {
  id: Int
}

type Tag {
  id: Int!
  Servers(after: ServerWhereUniqueInput, before: ServerWhereUniqueInput, first: Int, last: Int): [Server!]!
  tagName: String!
}

input TagWhereUniqueInput {
  id: Int
  tagName: String
}

type User {
  banned: Boolean!
  email: String!
  id: Int!
  photoUrl: String!
  role: String!
  Servers(after: ServerWhereUniqueInput, before: ServerWhereUniqueInput, first: Int, last: Int): [Server!]!
  username: String!
  Votes(after: VoteWhereUniqueInput, before: VoteWhereUniqueInput, first: Int, last: Int): [Vote!]!
}

type UserPayload {
  user: User!
}

type Version {
  id: Int!
  Servers(after: ServerWhereUniqueInput, before: ServerWhereUniqueInput, first: Int, last: Int): [Server!]!
  versionName: String!
}

type Vote {
  author: User!
  createdAt: DateTime!
  id: Int!
  server: Server!
}

type VoteCast {
  outcome: String!
}

input VoteWhereUniqueInput {
  createdAt: DateTime
  id: Int
}
